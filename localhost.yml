- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    homebrew_taps:
      - homebrew/cask-drivers
      - homebrew/cask-versions
      - eugenmayer/dockersync
      - blackfireio/homebrew-blackfire
      - aws/tap

    homebrew_packages:
      - { name: ansible }
      - { name: ant }
      - { name: autoconf }
      - { name: automake }
      - { name: awscli }
      - { name: aws-sam-cli }
      - { name: blackfire-agent }
      - { name: blackfire-php73 }
      - { name: ccze }
      - { name: coreutils }
      - { name: colordiff }
      - { name: diff-so-fancy }
      - { name: deployer }
      - { name: docker-clean }
      - { name: docker-machine }
      - { name: embulk }
      - { name: exa }
      - { name: fswatch }
      - { name: git }
      - { name: git-secrets }
      - { name: gh }
      - { name: ghq }
      - { name: gnu-sed }
      - { name: go }
      - { name: golang-migrate }
      - { name: graphviz }
      - { name: htop-osx }
      - { name: httpd }
      - { name: httpie }
      - { name: hub }
      - { name: icu4c }
      - { name: imagemagick }
      - { name: iproute2mac }
      - { name: krb5 }
      - { name: openjdk@11 } # for project (jenv cannot download language and install)
      - { name: jq }
      - { name: libmcrypt }
      - { name: mas }
      - { name: maven }
      - { name: memcached }
      - { name: mkcert }
      - { name: mysql@5.7 } # for project
      - { name: mutagen-io/mutagen/mutagen-beta }
      - { name: nginx }
      - { name: postgresql }
      - { name: nkf }
      - { name: nss }
      - { name: openssl }
      - { name: packer }
      - { name: pandoc }
      - { name: peco }
      - { name: php }
      - { name: composer }
      - { name: pkg-config }
      - { name: python }
      # using "brew edit unox"
      # modify depends_on "python@3" to depends_on "python@3.8" ↓
      - { name: eugenmayer/dockersync/unox }
      - { name: rsync }
      - { name: starship }
      - { name: sqlite }
      - { name: sqlite }
      - { name: ssh-copy-id }
      - { name: stripe/stripe-cli/stripe }
      - { name: the_silver_searcher }
      - { name: telnet }
      - { name: tig }
      - { name: tree }
      - {name: unison }
      - { name: wget }
      - { name: zsh }
      - { name: zsh-completions }
      # required from phpenv and php-build
      # see also https://qiita.com/0tofu/items/e95867ebc9dadf58cc70
      # Catalina では別途
      # export PHP_BUILD_CONFIGURE_OPTS="--with-libedit=$(brew --prefix libedit)"
      # を実行時にも指定しなければならない。
      - { name: bison }
      - { name: bzip2 }
      - { name: zlib }
      - { name: libiconv }
      - { name: libedit }
      - { name: libxml2 }
      - { name: re2c }
      # to pecl install amqp
      # see also https://stackoverflow.com/questions/51818515/installing-amqp-on-mac-with-brew#answer-52832365
      - { name: rabbitmq-c }
      - { name: wrk }

    homebrew_cask_packages:
      - 1password
      - adoptopenjdk8 # for project(embulk depends java8)
      - alfred
      - charles
      - coteditor
      - dbngin
      - deepl
      - discord
      - docker
      - dropbox
      - eclipse-java
      - firefox
      - flash-player
      - google-chrome
      - google-japanese-ime
      - grammarly
      - hex-fiend
      - intellij-idea-ce
      - iterm2
      - karabiner-elements
      - kindle
      - phpstorm
      - openoffice
      - slack
      - skitch
      - skype
      # Unable to connect to simple MySQL docker container
      - tableplus
      - typora
      - vagrant
      - virtualbox
      - visual-studio-code
      - wireshark
      - zoomus

    mas_packages:
      - { name: Keynote, id: 409183694 }
      - { name: "Be Focused - Focus Timer", id: 973134470 }
      - { name: "microsoft-remote-desktop", id: 1295203466 }
      - { name: "The Unarchiver", id: 425424353 }
      - { name: "Sequel Ace", id: 1518036000 }
      - { name: "ForkLift", id: 412448059}

    composer_packages:
      - { name: "grasmash/xdebug-toggle" }
      - { name: "pds/skeleton" }

    embulk_plugins:
      - embulk-input-s3
      - embulk-filter-to_json
      - embulk-output-bigquery
      - embulk-input-google_spreadsheets

    gems:
      - docker-sync

  handlers:
    - name: run fc-cache
      shell: fc-cache -vf

  tasks:
    # brew tap
    - name: install taps of homebrew
      homebrew_tap: tap="{{ item }}" state=present
      with_items: "{{ homebrew_taps }}"
      tags:
        - brew

    # brew update
    - name: update homebrew
      homebrew: update_homebrew=yes
      tags:
        - brew

    # brew cask install
    - name: install homebrew cask packages
      community.general.homebrew_cask: name="{{ item }}" state=present
      with_items: "{{ homebrew_cask_packages }}"
      ignore_errors: true
      tags:
        - cask

    # brew install
    - name: install homebrew packages
      homebrew: name="{{ item.name }}" state="{{ item.state|default('latest') }}" install_options="{{ item.install_options|default() }}"
      with_items: "{{ homebrew_packages }}"
      tags:
        - brew

    # mas install
    - name: install mas (App Store) packages
      shell: mas install "{{ item.id }}"
      with_items: "{{ mas_packages }}"
      register: ret
      changed_when: '"already installed" not in ret.stdout'
      tags:
        - mas

    # mas upgrade
    - name: upgrade all mas (App Store) packages
      shell: mas upgrade
      register: ret
      changed_when: '"Everything is up-to-date" not in ret.stdout'
      tags:
        - mas

    # composer packages global install
    - name: install composer packages
      composer: command=require global_command=yes arguments="{{ item.name }}"
      with_items: "{{ composer_packages }}"
      tags:
        - composer

    # gem install bundler
    - name: install bundler
      gem: name="bundler" state="latest"
      tags:
        - gem

    # install oh-my-zsh
    - name: install oh-my-zsh
      shell: sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
      args:
        creates: ~/.oh-my-zsh
      tags:
        - zsh
    - name: install zsh-completions
      file: src=/usr/local/share/zsh-completions dest=~/.oh-my-zsh/custom/plugins/zsh-completions state=link
      tags:
        - zsh

    - name: 'karabiner: make symlink of setting files'
      file:
        src: "{{ item }}"
        dest: ~/Library/Application\ Support/Karabiner/{{ item | basename }}
        state: link
        force: yes
      with_fileglob:
        - Karabiner/*

    # phpenv composer （手動で ~/.anyenv/envs/phpenv/plugins/ に入れるのでキャッシュのため）
    - name: get phpenv-composer
      shell: sh -c "ghq get ngyuki/phpenv-composer"
      tags:
        - phpenv

    # For the system Java wrappers to find openjdk@11, symlink it
    - name: symlink openjdk@11
      shell: sudo ln -sfn /usr/local/opt/openjdk@11/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-11.jdk

    - name: Set OS X Defaults
      shell: ./var/set_mac.sh
      register: set_mac_check
      failed_when: set_mac_check.rc not in [0]

    # Sequel Pro Nightly build (because stable version crashes in Mojave)
    - name: install SequelPro nightly build
      unarchive:
        src: "https://sequelpro.com/builds/Sequel-Pro-Build-97c1b85783.zip"
        dest: "~/Applications/"
        remote_src: yes

    - name: install Json Editor app
      unarchive:
        src: https://github.com/fand/json-editor-app/releases/download/v1.0.0/JSON.Editor-darwin-x64-1.0.0.zip
        dest: ~/Applications
        remote_src: yes
      ignore_errors: yes

    - name: fetch SDKMAN
      uri:
        url: https://get.sdkman.io
        return_content: yes
      register: get_sdkman_io

    - name: install SDKMAN
      shell: "{{ get_sdkman_io.content }}"

    - name: configure SDKMAN
      shell: "chmod 755  ~/.sdkman/bin/sdkman-init.sh"

    - name: digdag location directory
      file: path=~/bin state=directory mode=0755

    - name: fetch digdag
      get_url:
        url: "https://dl.digdag.io/digdag-latest"
        dest: "~/bin/digdag"
        force: yes
    - name: configure digdag
      shell: "chmod +x ~/bin/digdag"

    - name: SSL
      shell: "mkcert -install"

    # ここから以下は anyenv 構築後に実行しなければならない
    # Embulk
    - name: install embulk plugins
      shell: embulk gem install "{{ item }}"
      with_items: "{{ embulk_plugins }}"
      tags:
        - embulk

    # gem
    - name: install gems
      shell: gem install "{{ item }}"
      with_items: "{{ gems }}"
      tags:
        - gem
